/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const TentsLazyRouteImport = createFileRoute('/tents')()
const ReservationLazyRouteImport = createFileRoute('/reservation')()
const GalleryLazyRouteImport = createFileRoute('/gallery')()
const ContactsLazyRouteImport = createFileRoute('/contacts')()
const IndexLazyRouteImport = createFileRoute('/')()

const TentsLazyRoute = TentsLazyRouteImport.update({
  id: '/tents',
  path: '/tents',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/tents.lazy').then((d) => d.Route))
const ReservationLazyRoute = ReservationLazyRouteImport.update({
  id: '/reservation',
  path: '/reservation',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/reservation.lazy').then((d) => d.Route))
const GalleryLazyRoute = GalleryLazyRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/gallery.lazy').then((d) => d.Route))
const ContactsLazyRoute = ContactsLazyRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/contacts.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/reservation': typeof ReservationLazyRoute
  '/tents': typeof TentsLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/reservation': typeof ReservationLazyRoute
  '/tents': typeof TentsLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/gallery': typeof GalleryLazyRoute
  '/reservation': typeof ReservationLazyRoute
  '/tents': typeof TentsLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contacts' | '/gallery' | '/reservation' | '/tents'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts' | '/gallery' | '/reservation' | '/tents'
  id: '__root__' | '/' | '/contacts' | '/gallery' | '/reservation' | '/tents'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactsLazyRoute: typeof ContactsLazyRoute
  GalleryLazyRoute: typeof GalleryLazyRoute
  ReservationLazyRoute: typeof ReservationLazyRoute
  TentsLazyRoute: typeof TentsLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tents': {
      id: '/tents'
      path: '/tents'
      fullPath: '/tents'
      preLoaderRoute: typeof TentsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reservation': {
      id: '/reservation'
      path: '/reservation'
      fullPath: '/reservation'
      preLoaderRoute: typeof ReservationLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactsLazyRoute: ContactsLazyRoute,
  GalleryLazyRoute: GalleryLazyRoute,
  ReservationLazyRoute: ReservationLazyRoute,
  TentsLazyRoute: TentsLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
